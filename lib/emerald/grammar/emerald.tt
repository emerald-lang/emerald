#
# Context free grammar for the Emerald language.
# Emerald: a preprocessor for html5.
#
grammar Emerald
  include Tokens
  include Scopes
  include Variables

  rule main
    (scope / list / nested / line / comment)+ <Root>
  end

  # A nested statement is a tag statement followed by a newline and an
  # a block scoped by braces.
  rule nested
    tag_statement newline lbrace newline main rbrace newline <Nested>
  end

  rule scope
    fn:scope_fn lbrace newline body:main rbrace newline <Scope>
  end

  # Comment has optional newline, so it's not included in the first sequence
  rule line
    (tag_statement / text / comment) newline <Line>
  end

  # Rule for keyword list (metas, scripts, styles)
  rule list
    keyword newline lbrace newline (string newline)+ rbrace newline <List>
  end

  # Single line and multiline comments
  rule comment
    space* '!' ( !"\n" . )* "\n" <Comment> /
    space* '<!' ( !"!>" . )* "!>\n" <Comment>
  end

  # TODO: add escape characters
  rule string
    '"' ( !'"' (variable / .) )* '"' <StringNode>
  end

  # Ex. h1 "test this out."
  rule text
    h_num space* body:text_content? <Text>
  end

  rule text_content
    multiline_literal / multiline_templateless_literal / inline_literal
  end

  rule multiline_literal
    "->" space* newline
    body:(variable / '\$' / !'$' .)*
    "$" <MultilineLiteral>
  end

  rule multiline_templateless_literal
    "=>" space* newline
    body:('\$' / !'$' .)*
    "$" <MultilineTemplatelessLiteral>
  end

  rule inline_literal
    ( variable / !"\n" . )* <InlineLiteral>
  end

  # tag space* string (0 or 1), attr_list (0 or 1)
  # fix this.
  rule tag_statement
    tag lparen attributes rparen <TagStatement> /
    tag space? (( !"\n" . )*)? space* attr_list? <TagStatement>
  end

  # attribute list for
  # lparen newline (or none), attribute* rparen
  rule attr_list
    lparen newline attribute* space* rparen <AttributeList>
  end

  rule attributes
    attribute* <Attributes>
  end

  # if newline option, must indent
  rule attribute
    space* attr space* equals space* string comma? <Attribute>
  end
end
